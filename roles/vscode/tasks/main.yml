---
- name: run key helper
  import_tasks: '{{ helpers }}/key.yml'
  vars:
    key_list:
      - 'https://packages.microsoft.com/keys/microsoft.asc'

- name: run repo helper
  import_tasks: '{{ helpers }}/repo.yml'
  vars:
    repo_list:
      - repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
        filename: 'vscode'

- name: run package helper
  import_tasks: '{{ helpers }}/package_apt.yml'
  vars:
    package_apt_list:
      install:
        - 'code'

- name: run package helper
  import_tasks: '{{ helpers }}/package_pip.yml'
  vars:
    package_pip_list:
      install:
        - 'pylint'
        - 'yapf'

- name: run template helper
  import_tasks: '{{ helpers }}/template.yml'
  vars:
    template_list:
      - src: 'javascript.json'
        dest: '{{ user_config }}/Code/User/snippets'
      - src: 'keybindings.json'
        dest: '{{ user_config }}/Code/User'
      - src: 'settings.json'
        dest: '{{ user_config }}/Code/User'

- name: run mime helper
  import_tasks: '{{ helpers }}/mime.yml'
  vars:
    mime_list:
      entry_name: 'code'
      type:
        - 'application/xml'
        - 'text/markdown'
        - 'text/x-python'

- name: run alias helper
  import_tasks: '{{ helpers }}/alias.yml'

- name: reinstall extensions
  block:
    - name: uninstall extensions
      command: 'code --uninstall-extension {{ item }}'
      register: uninstall_result
      changed_when: uninstall_result.stdout | regex_search("(was successfully uninstalled)")
      loop: '{{ vscode_extensions }}'
  rescue:
    - name: extensions failed
      debug:
        msg: '{{ uninstall_result.results | to_nice_json }}'
  always:
    - name: install extensions
      command: 'code --install-extension {{ item }}'
      register: install_result
      changed_when: not install_result.stdout | regex_search("(is already installed)")
      until: install_result.failed == false
      retries: 10
      delay: 10
      loop: '{{ vscode_extensions }}'
