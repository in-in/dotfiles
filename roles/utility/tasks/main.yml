---
# create lists
- name: create lists
  set_fact:
    '{{ item }}_list': '{{
      hostvars.localhost
      | json_query(''*.'' + item + '''')
      | list
    }}'
  with_items: '{{ utility_task_list }}'

# utility_key
- name: utility_key
  become: yes
  apt_key:
    url: '{{ item }}'
  with_items: '{{ utility_key_list }}'

# utility_repository
- name: utility_repository
  become: yes
  apt_repository:
    repo: '{{ item }}'
    update_cache: yes
  with_items: '{{ utility_repository_list }}'

# utility_package
- name: utility_package
  become: yes
  apt:
    force_apt_get: yes
    name: '{{ item }}'
    state: latest
  with_items: '{{ utility_package_list }}'

# utility_git_repository
- name: utility_git_repository | collect stat
  stat:
    path: '{{ item.dest }}'
  register: dir
  with_items: '{{ utility_git_repository_list }}'

- name: utility_git_repository | remove existing directory
  file:
    path: '{{ item.item.dest }}'
    force: yes
    state: absent
  when: item.stat.exists and item.stat.isdir
  with_items: '{{ dir.results }}'

- name: utility_git_repository | add repository
  git:
    repo: '{{ item.repo }}'
    dest: '{{ item.dest }}'
  with_items: '{{ utility_git_repository_list }}'

# utility_link
- name: utility_link | collect stat
  stat:
    path: '{{ item.dest }}'
  register: dir
  with_items: '{{ utility_link_list }}'

- name: utility_link | remove existing directory
  file:
    path: '{{ item.item.dest }}'
    state: absent
  when: item.stat.exists and item.stat.isdir
  with_items: '{{ dir.results }}'

- name: utility_link | create link
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    force: yes
    state: link
  with_items: '{{ utility_link_list }}'

# utility_gitignore
- name: utility_gitignore | create tmp directory
  file:
    path: '{{ gitignore_tmp }}'
    state: directory
    force: yes

- name: utility_gitignore | create template
  template:
    src: gitignore.j2
    dest: '{{ gitignore_tmp }}/{{ item.0 }}'
  with_indexed_items: '{{ utility_gitignore_list }}'

- name: utility_gitignore | create main gitignore file
  assemble:
    src: '{{ gitignore_tmp }}'
    dest: '{{ dotfiles_directory }}/.gitignore'
    delimiter: '\n'

# utility_startup
- name: utility_startup | collect stat
  stat:
    path: '{{ startup_dest }}'
  register: result

- name: utility_startup | recreate directory
  block:
    - file:
        path: '{{ startup_dest }}'
        state: absent
    - file:
        path: '{{ startup_dest }}'
        state: directory
  when: result.stat.isdir is defined

- name: utility_startup | create directory
  file:
    path: '{{ startup_dest }}'
    state: directory
  when: result.stat.isdir is not defined

- name: utility_startup | create template file
  template:
    src: 'startup.j2'
    dest: '{{ startup_dest }}/{{ item.name }}.desktop'
  with_items: '{{ utility_startup_list }}'

# utility_copy
- name: utility_copy | collect stat
  stat:
    path: '{{ item.dir }}'
  register: result
  when: item.dir is defined
  with_items: '{{ utility_copy_list }}'

- name: utility_copy | remove existing directory
  file:
    path: '{{ item.stat.path }}'
    state: absent
  when:
    - item is not skipped
    - item.stat.exists
    - item.stat.isdir is defined
  with_items: '{{ result.results }}'

- name: utility_copy | with privilege
  become: yes
  copy:
    backup: yes
    src: '{{ item.1.src }}'
    dest: '{{ item.1.dest }}'
  when: item.0.privilege is defined
  with_subelements:
    - '{{ utility_copy_list }}'
    - paths

- name: utility_copy | without privilege
  copy:
    backup: yes
    src: '{{ item.1.src }}'
    dest: '{{ item.1.dest }}'
  when: item.0.privilege is not defined
  with_subelements:
    - '{{ utility_copy_list }}'
    - paths
